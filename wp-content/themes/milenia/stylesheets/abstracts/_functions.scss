// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}

@function type-scale($level) {
  @return map-get(map-get($type-settings, $level), 'font-size');
}

@function line-height($level) {
  @return map-get(map-get($type-settings, $level), 'line-height');
}

@function remy($pxsize, $rembase:16) {
  @return ($pxsize/$rembase)+rem;
}

@function negremy($pxsize,  $rembase:16) {
  @return (-$pxsize/$rembase)+rem;
}

@function remymulti($top, $right, $bottom, $left, $rembase:16) {
  @return ($top/$rembase)+rem ($right/$rembase)+rem ($bottom/$rembase)+rem ($left/$rembase)+rem;
}
